{-# LANGUAGE FlexibleContexts #-}


module Ass4 where
import Ass3
import Ass2
import Lecture5
import Test.QuickCheck

-- Assignment 4.1: Use the list generated by the carmichael function for a further test of Fermat's primality check.
carmichael :: [Integer]
carmichael = [ (6*k+1)*(12*k+1)*(18*k+1) |
     k <- [2..],
     prime (6*k+1),
     prime (12*k+1),
     prime (18*k+1) ]


testFermatWithCarMichael :: Int -> Int -> IO Integer
testFermatWithCarMichael n k = do
   outcome <- primeTestsF k carmichael_number
   if outcome then return carmichael_number else testFermatWithCarMichael (n+1) k
   where
     carmichael_number = (carmichael !! n)

-- Assignment 4.2: Read the entry on Carmichael numbers on Wikipedia and explain what
-- you find. If necessary, consult other sources.
-- Argument how this information helps with testing Fermat's primality check
-- using the carmichael function.

{-
From wikipedia we can extract that the Carmichael numbers are composite numbers.
Sharing the same properoty as Fermat's little theorm, making them Fermat "pseudoprimes".

We learned more about fermat psuedo primes here: https://youtu.be/oUMotDWVLpw?t=215

Fermat psuedo primes are composite numbers, and thus not considered to be prime
by the definition of a prime number (divisible by one and itself). However, fermat's
primality check would define these numbers as a prime.

For k = 1,2,3, the testFermatWithCarMichael shows that the fermat's primality check is
true at the first carmicheal number, nanmely 294409. This confirms our findings from wikipedia
and the youtube video about fermat primality test. This is because fermat's primality check suggests
that 294409 is prime. But as it is a carmicheal number, and thus a composite integer,
we therefore can define 294409 as a Fermat "pseudoprime".
-}



-- Assignment 4.3: Use the list generated by the carmichael function to test the
-- Miller-Rabin primality check. What do you find?

-- Down below our test implementation. We found that by running this implementation,
-- the Miller-Rabin primality test does not define car micheal numbers as prime.
-- We cannot say this for all car micheal numbers and all K (it is not a mathematical proof),
-- but when running this implementation multiple times we did not get an answer.
-- Eventually my memory got full and the GHC process got aborted by my operating system.

-- For example:
-- *Ass4> testMillerWithCarMichael 0 1000
-- tkGNU MP: Cannot allocate memory (size=970226800)
-- Aborted (core dumped)

-- *Ass4> testMillerWithCarMichael 0 1
-- GNU MP: Cannot allocate memory (size=1009188736)
-- Aborted (core dumped)


testMillerWithCarMichael :: Int -> Int -> IO Integer
testMillerWithCarMichael n k = do
  outcome <- primeMR k carmichael_number
  if outcome then return carmichael_number else testMillerWithCarMichael (n+1) k
  where
    carmichael_number = (carmichael !! n)
